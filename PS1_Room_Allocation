// All Acepted

#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
 
#include <iostream>
#include <bits/stdc++.h>
#include <queue>
 
using namespace std;
 
using ll = long long;
#define int ll
 
#define endl '\n'
#define fora(i, a, b) for (int i = int(a); i < int(b); i++)
#define foro(i, b) fora(i, 0, b)
#define forta(i, a, b) for (int i = int(b) - 1; i >= int(a); i--)
#define forto(i, b) forta(i, 0, b)
#define pb push_back
#define ff first
#define sda second
#define all(x) x.begin(), x.end()
 
using pi = pair<int, int>;
using vi = vector<int>;
using vvi = vector<vi>;
 
#define mp make_pair
#define mt make_tuple
 
void init_code()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
 
#include <iostream>
#include <vector>
#include <algorithm>
 
bool customComparator(const std::pair<std::pair<int, int>, int> &a, const std::pair<std::pair<int, int>, int> &b)
{
    if (a.first.first != b.first.first)
        return a.first.first < b.first.first;
    if (a.first.second != b.first.second)
        return a.first.second < b.first.second;
    return a.second < b.second;
}
 
void solve()
{
    int n;
    cin >> n;
    vi a(n), b(n), chk(n);
    vector<pair<pi, int>> v;
    ;
    foro(i, n)
    {
        cin >> a[i] >> b[i];
        v.pb({{a[i], b[i]}, i});
    }
    sort(all(v), customComparator);
    priority_queue<pi> q;
    int t = 0, ctr = 0;
    foro(i, n)
    {
        if (q.empty())
        {
            ctr = 1;
            q.push({-v[i].first.second, ctr});
            chk[v[i].second] = ctr;
        }
        else
        {
            int m = q.top().second;
            if (-q.top().first < v[i].first.first)
            {
                q.pop();
                q.push({-v[i].first.second, m});
                chk[v[i].second] = m;
            }
            else
            {
                ctr++;
                q.push({-v[i].first.second, ctr});
                chk[v[i].second] = ctr;
            }
        }
    }
    foro(i, n)
    {
        t = max(t, chk[i]);
    }
    cout << t << endl;
    foro(i, n)
    {
        cout << chk[i] << " ";
    }
}
 
signed main()
{
 
    init_code();
 
    int t = 1;
    // cin >> t;
    while (t--)
    {
        solve();
    }
}

