// Debugging.. 

#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")

#include <iostream>
#include <bits/stdc++.h>

using namespace std;

using ll = long long;
#define int ll

#define endl '\n'
#define fora(i, a, b) for (int i = int(a); i < int(b); i++)
#define foro(i, b) fora(i, 0, b)
#define forta(i, a, b) for (int i = int(b) - 1; i >= int(a); i--)
#define forto(i, b) forta(i, 0, b)
#define pb push_back
#define ff first
#define sda second
#define all(x) x.begin(), x.end()

using pi = pair<int, int>;
using vi = vector<int>;
using vvi = vector<vi>;

#define mp make_pair
#define mt make_tuple

void init_code()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}

int karlo(int n)
{
    int temp = n;
    int ctr = 0;
    while (temp)
    {
        temp /= 10;
        ctr++;
    }
    int sum = 0;
    fora(i, 1, ctr)
    {
        sum += pow(9, i);
    }
    string s = to_string(n);
    sum += (s[0] - 49) * pow(9, ctr - 1);
    fora(i, 1, n)
    {
        if (s[i - 1] < s[i])
        {
            sum += (s[i] - 49) * pow(9, ctr - 1 - i);
        }
        else if (s[i - 1] == s[i])
        {
            sum += (s[i] - 48) * pow(9, ctr - 1 - i);
            return sum;
        }
        else
        {
            sum += (s[i] - 48) * pow(9, ctr - 1 - i);
        }
    }
    return sum;
}

void solve()
{
    int a, b;
    cin >> a >> b;
    cout << karlo(b) - karlo(a - 1);
}

signed main()
{

    init_code();

    int t = 1;
    // cin >> t;
    while (t--)
    {
        solve();
    }
}
