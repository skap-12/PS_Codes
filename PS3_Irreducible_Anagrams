// All accepted

#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")

#include <iostream>
#include <vector>
#include <map>

using namespace std;

using ll = long long;
#define int ll

#define endl '\n'
#define fora(i, a, b) for (int i = int(a); i < int(b); i++)
#define foro(i, b) fora(i, 0, b)
#define forta(i, a, b) for (int i = int(b) - 1; i >= int(a); i--)
#define forto(i, b) forta(i, 0, b)
#define pb push_back
#define ff first
#define sda second
#define all(x) x.begin(), x.end()

using pi = pair<int, int>;
using vi = vector<int>;
using vvi = vector<vi>;

#define mp make_pair
#define mt make_tuple

void init_code()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}

void solve()
{
    string s;
    cin >> s;
    int q;
    cin >> q;

    int n = s.size();

    // Preprocessing
    vvi prefix_count(n + 1, vector<int>(26, 0));

    for (int i = 1; i <= n; i++)
    {
        for (int j = 0; j < 26; j++)
        {
            prefix_count[i][j] = prefix_count[i - 1][j];
        }
        prefix_count[i][s[i - 1] - 'a']++;
    }

    while (q--)
    {
        int l, r;
        cin >> l >> r;

        if (r == l)
        {
            cout << "Yes" << endl;
            continue;
        }

        int ctr = 0;
        for (int i = 0; i < 26; i++)
        {
            if (prefix_count[r][i] - prefix_count[l - 1][i] > 0)
            {
                ctr++;
            }
        }

        if (ctr > 2)
        {
            cout << "Yes" << endl;
        }
        else if (s[l - 1] != s[r - 1])
        {
            cout << "Yes" << endl;
        }
        else
        {
            cout << "No" << endl;
        }
    }
}

signed main()
{
    init_code();

    int t = 1;
    // cin >> t;
    while (t--)
    {
        solve();
    }

    return 0;
}

